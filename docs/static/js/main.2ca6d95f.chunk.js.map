{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gisfs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","imagenes","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAaA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAhBe,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,kDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAQD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OADAc,QAAQC,IAAIL,EAAOV,GAEf,sBAAKgB,UAAU,+CAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCFHS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SACtB,ECHwB,SAACA,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLjB,KAAMoB,EACNL,SAAS,MAEd,UAEZ,CAACtB,IAEGuB,EDf6BM,CAAa7B,GAAnC8B,EAAd,EAAQvB,KAAgBe,EAAxB,EAAwBA,QACxB,OACI,qCACI,oBAAIJ,UAAU,0CAAd,SAA0DlB,IACzDsB,GAAW,yCACZ,qBAAKJ,UAAU,oDAAf,SAEQY,EAASrB,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEWtBoB,EArBM,WACjB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAEA,OAAQ,qCACJ,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ+C,EAAWvB,KACP,SAAAT,GAAQ,OAEJ,aADA,CACC,EAAD,CAEIA,SAAUA,GADLA,Y,MCbjCiC,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.2ca6d95f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChanghe = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const hundleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={hundleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChanghe}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}// mandamos que sea necesario que provea esta funcion","export const getGifs = async (category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q= ${encodeURI(category)} &limit=5&api_key=1RVb7ZLauGL6fkCQsGZ4YWVcSoAB9Oi8`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gisfs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gisfs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    console.log(title, url);\r\n    return (\r\n        <div className='card animate__animated animate__bounceInLeft'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { data: imagenes, loading } = useFetchGifs(category);\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__bounceInLeft' >{category}</h3>\r\n            {loading && <p>cargando</p>}\r\n            <div className='card-grid animate__animated animate__bounceInLeft'>\r\n                {\r\n                    imagenes.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))// el map me sive para mostrar los elementos de mi arreglo\r\n                }\r\n            </div>\r\n        </>)\r\n}","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                setTimeout(() => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false,\r\n                    });\r\n                }, 5000);\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n    //mi state es un objeto, que tiene una data [], y un loading en true\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n//import PropTypes from 'prop-types'\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    return (<>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n        <hr />\r\n        <ol>\r\n            {\r\n                categories.map(\r\n                    category =>\r\n                        // <li key={category} > {category}</li>\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category} />\r\n                )// el map me sive para mostrar los elementos de mi arreglo\r\n            }\r\n        </ol>\r\n    </>);\r\n}\r\n\r\nexport default GifExpertApp;\r\n// crear un functinalComponent\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));"],"sourceRoot":""}